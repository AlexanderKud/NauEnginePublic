#usda 1.0
(
    """ schema for testing the usdGenSchema
    """
    subLayers = [
        @usd/schema.usda@
    ]
) 

over "GLOBAL" (
    customData = {
        string libraryName       = "NauVFXLib"
        string libraryPath       = "."
        string libraryPrefix     = "VFX"
    }
) {
}

# TODO Divide the code into subschemes (LifeProperties, SpwanProperties e.t.c)
class VFXInstance "VFXInstance" (
    inherits = </Typed>
    customData = {
    string className = "VFXInstance"
}
)
{
    asset Texture:texture = "content/textures/default.jpg.nausd"

# Spawn Settings
    int spawnType = 2 # [0, 1, 2] ["Fixed", "Burst", "Linear"]

    int linearParticleCountMin = 1
    int linearParticleCountMax = 1

    int burstParticleCountMin = 0
    int burstParticleCountMax = 0
    int cycles = 0
    double period = 0.0

    int fixedParticleCount = 0
   
# Life Settings
    double lifeMin = 2.5;
    double lifeMax = 2.5;
    double rndOffset = 0.0;
    double delay = 0.0;

# Radius Settings
    bool radiusEnabled = true;
    double radiusMin = 1.0;
    double radiusmax = 1.0;

# Color Settings
    bool colorEnabled = false;
    color4d startColor = (1.0, 0.0, 0.0, 1.0);
    color4d endColor = (1.0, 0.0, 0.0, 1.0);

# Texture Settings
    bool textureEnabled = false;
    int columns = 1;
    int rows = 1;

# Position Settings
    int positionType = 3 # [0, 1, 2, 3] ["Sphere", "Cylinder", "Cone", "Box"]

    bool positionEnabled = false;
    double positionVolume = 0.0;
    double3 offset = (0.0, 0.0, 0.0);

        # Sphere
        double sphereVolume = 0.0;
        double sphereRadius = 0.0;

        # Cylinder
        double3 cylinderVec = (0.0, 0.0, 0.0);
        double cylinderVolume = 0.0;
        double cylinderRadius = 0.0;
        double cylinderHeight = 0.0;
        double cylinderRandomBurst = 0.0;

        # Cone
        double3 coneVec = (0.0, 0.0, 0.0);
        double coneVolume = 0.0;
        double coneWidthTop = 0.0;
        double coneWidthBottom = 0.0;
        double coneHeight = 0.0;
        double coneRandomBurst = 0.0;

        # Box
        double boxVolume = 0.0;
        double boxWidth = 0.0;
        double boxHeight = 0.0;
        double boxDepth = 0.0;

# Rotation Settings
    bool rotationEnabled = false;
    double startAngleMin = 0.0;
    double startAngleMax = 0.0;

# Veclocity Settings
    bool velocityEnabled = true;

    double mass = 0.0;
    double dragCoeff = 0.0;
    double dragToRadK = 0.0;

    bool applyGravity = false;
    bool gravityTransform = false;
    bool applyParentVelocity = false;

        # Velocity Start
        bool velocityStartEnabled = true;
        double velocityStartMin = 1.2;
        double velocityStartMax = 1.2;
        double velocityStartVecRnd = 0.0;

        int velocityStartType = 1 # [0, 1, 2] ["Point", "Vec", "StartShape"]
    
        # FxInitVelocityPoint
        double3 velocityStartFxInitVelocityPoint = (0.0, 0.0, 0.0);

        # FxInitVelocityVec
        double3 velocityStartFxInitVelocityVec = (0.0, 1.0, 0.0);

        # Velocity Add
        bool velocityAddEnabled = true;
        double velocityAddMin = 0.0;
        double velocityAddMax = 0.0;
        double velocityAddVecRnd = 0.0;

        int velocityAddType = 1 # [0, 1, 2] ["Point", "Vec", "Cone"]

        # FxInitVelocityPoint
        double3 velocityAddFxInitVelocityPoint = (0.0, 0.0, 0.0);

        # FxInitVelocityVec
        double3 velocityAddFxInitVelocityVec = (0.0, 0.0, 0.0);

        # FxInitVelocityCone
        double3 fxInitVelocityConeVec = (0.0, 0.0, 0.0);
        double3 fxInitVelocityConeOffset = (0.0, 0.0, 0.0);
        double fxInitVelocityConeWidthTop = 0.0;
        double fxInitVelocityConeWidthBottom = 0.0;
        double fxInitVelocityConeCenterPower = 0.0;
        double fxInitVelocityConeBorderPower = 0.0;

        # FxForceField

        # FxForceFieldVortex
        bool fxForceFieldVortexEnabled = true;
        double3 fxForceFieldVortexAxisDirection = (0.0, 1.0, 0.0);
        double fxForceFieldVortexDirectionRnd = 0.0;
        double3 fxForceFieldVortexAxisPosition = (0.0, 0.0, 0.0);
        double3 fxForceFieldVortexPositionRnd = (0.0, 0.0, 0.0);
        double fxForceFieldVortexRotationSpeedMin = 0.2;
        double fxForceFieldVortexRotationSpeedMax = 0.2;
        double fxForceFieldVortexPullSpeedMin = 0.2;
        double fxForceFieldVortexPullSpeedMax = 0.2;

        # FxForceFieldNoise
        bool fxForceFieldNoiseEnabled = false;

        int forceFieldNoiseType = 0 # [0, 1] ["VelocityAdd", "PosOffset"]

        double fxForceFieldNoisePosScale = 0.0;
        double fxForceFieldNoisePowerScale = 0.0;
        double fxForceFieldNoisePowerRnd = 0.0;
        double fxForceFieldNoisePowerPerPartRnd = 0.0;

        # FxWind
        bool fxWindWindEnabled = false;
        double fxWindWindDirectionalForce = 0.0;
        double fxWindWindDirectionalFreq = 0.0;
        double fxWindWindTurbulenceForce = 0.0;
        double fxWindWindTurbulenceFreq = 0.0;
        bool fxWindWindImpulseWind = false;
        double fxWindWindImpulseWindForce = 0.0;
}
